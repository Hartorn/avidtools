from pydantic import BaseModel
from typing import List
from datetime import date

from .components import Affects, AvidTaxonomy, Problemtype, Reference, LangValue, Impact
from .enums import TypeEnum
from .report import Report

class VulnMetadata(BaseModel):
    vuln_id: str

class ReportSummary(BaseModel):
    report_id: str
    type: TypeEnum
    name: str

class Vulnerability(BaseModel):
    data_type: str = 'AVID'
    data_version: str = None
    metadata: VulnMetadata = None
    affects: Affects = None
    problemtype: Problemtype = None
    references: List[Reference] = None
    description: LangValue = None
    reports: List[ReportSummary] = None
    impact: Impact = None
    credit: List[LangValue] = None
    published_date: date = None
    last_modified_date: date = None
        
    def save(self, location):
        with open(location, "w") as outfile:
            outfile.write(self.json(indent=4))
    
    def convert(self, report: Report):
        self.data_version = report.data_version
        self.affects = report.affects
        self.problemtype = report.problemtype
        self.description = report.description
        self.references = report.references
        self.impact = report.impact
        self.credit = report.credit
        self.published_date = date.today()
        self.last_modified_date = date.today()

        if self.impact.avid is not None: # delete vuln_id field from report
            self.impact.avid = AvidTaxonomy(
                risk_domain = self.impact.avid.risk_domain,
                sep_view = self.impact.avid.sep_view,
                lifecycle_view = self.impact.avid.lifecycle_view,
                taxonomy_version = self.impact.avid.taxonomy_version
            )
